/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package loanassistant;

import java.awt.Color;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author User
 */
public class LoanAssistant extends javax.swing.JFrame {

    boolean computePayment;
    /**
 * Creates new form2 LoanAssistant
     */
    public LoanAssistant() {
        initComponents();
        setLocationRelativeTo(null);
        monthPayment.setVisible(false);
        monthsTextField.setBackground(Color.YELLOW);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        balanceLabel = new javax.swing.JLabel();
        interestLabel = new javax.swing.JLabel();
        monthsLabel = new javax.swing.JLabel();
        paymentLabel = new javax.swing.JLabel();
        balanceTextField = new javax.swing.JTextField();
        interestTextField = new javax.swing.JTextField();
        monthsTextField = new javax.swing.JTextField();
        paymentTextField = new javax.swing.JTextField();
        analysisLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        analysisTextArea = new javax.swing.JTextArea();
        exitButton = new javax.swing.JButton();
        computeButton = new javax.swing.JButton();
        newLoanButton = new javax.swing.JButton();
        paymentButton = new javax.swing.JButton();
        monthPayment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Loan Assistant");
        setResizable(false);

        balanceLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        balanceLabel.setText("Loan Balance");
        balanceLabel.setToolTipText("");

        interestLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        interestLabel.setText("Interest Rate");

        monthsLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        monthsLabel.setText("Number Of Payments");

        paymentLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paymentLabel.setText("Monthly Payment");

        balanceTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        balanceTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        interestTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        interestTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        monthsTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        monthsTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        paymentTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        paymentTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        analysisLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        analysisLabel.setText("Loan Analysis");

        analysisTextArea.setColumns(20);
        analysisTextArea.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        analysisTextArea.setRows(5);
        analysisTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(analysisTextArea);

        exitButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        exitButton.setText("Exit");

        computeButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        computeButton.setText("Compute Number of Payment");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        newLoanButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        newLoanButton.setText("New Loan Analysis");
        newLoanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLoanButtonActionPerformed(evt);
            }
        });

        paymentButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        paymentButton.setText("X");
        paymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentButtonActionPerformed(evt);
            }
        });

        monthPayment.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        monthPayment.setText("X");
        monthPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthPaymentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newLoanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(computeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitButton)
                        .addGap(149, 149, 149))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(monthPayment)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(interestLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(balanceLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                    .addComponent(monthsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paymentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(balanceTextField)
                    .addComponent(interestTextField)
                    .addComponent(monthsTextField)
                    .addComponent(paymentTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(paymentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analysisLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(balanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(balanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analysisLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(interestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(interestTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(monthsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(monthsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(monthPayment))))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(paymentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(paymentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(paymentButton))))
                    .addComponent(jScrollPane1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitButton)
                            .addComponent(newLoanButton))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(computeButton)
                        .addContainerGap(64, Short.MAX_VALUE))))
        );

        setBounds(0, 0, 846, 413);
    }// </editor-fold>//GEN-END:initComponents

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        // TODO add your handling code here:
        double balance, interest, payment;
				int months;
				double monthlyInterest, multiplier;
				double loanBalance, finalPayment;
				if (validateDecimalNumber(balanceTextField))
				{
				balance =
				Double.valueOf(balanceTextField.getText()).doubleValue();
				}
				else
				{
				JOptionPane.showConfirmDialog(null, "Invalid or empty Loan Balance entry.\nPleasecorrect.", "Balance Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
				return;
				}
				if (validateDecimalNumber(interestTextField))
				{
				interest =
				Double.valueOf(interestTextField.getText()).doubleValue();

				}
				else
				{
				JOptionPane.showConfirmDialog(null, "Invalid or empty Interest Rate entry.\nPleasecorrect.", "Interest Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
				return;
				}
				monthlyInterest = interest / 1200;
				if (computePayment)
				{
				// Compute loan payment
				if (validateDecimalNumber(monthsTextField))
				{
				months =
				Integer.valueOf(monthsTextField.getText()).intValue();
				}
				else
				{
				JOptionPane.showConfirmDialog(null, "Invalid or empty Number of Payments entry.\nPlease correct.", "Number of Payments Input Error",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
				return;
				}
				if (interest == 0)
				{
				payment = balance / months;
				}
				else
				{
				multiplier = Math.pow(1 + monthlyInterest, months);
				payment = balance * monthlyInterest * multiplier / (multiplier - 1);
				}
				paymentTextField.setText(new DecimalFormat("0.00").format(payment));
				}
				else

				{
				// Compute number of payments
				if (validateDecimalNumber(paymentTextField))
				{
				payment =
				Double.valueOf(paymentTextField.getText()).doubleValue();
				if (payment <= (balance * monthlyInterest + 1.0))
				{
				if (JOptionPane.showConfirmDialog(null, "Minimum payment must be $" +new DecimalFormat("0.00").format((int)(balance * monthlyInterest + 1.0)) + "\n" + "Do you want to use the minimum payment?", "Input Error", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION)
				{ 
				paymentTextField.setText(new DecimalFormat("0").format((int)(balance *monthlyInterest + 1.0)));
				payment =
				Double.valueOf(paymentTextField.getText()).doubleValue();
				}
				else
				{
				paymentTextField.requestFocus();
				return;
				}
				}
				}
				else
				{
				JOptionPane.showConfirmDialog(null, "Invalid or empty Monthly Payment entry.\nPlease correct.", "Payment Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
				return;
				}
				if (interest == 0)
				{
				months = (int)(balance / payment);
				}
				else

				{
				months = (int)((Math.log(payment) - Math.log(payment - balance * monthlyInterest)) /Math.log(1 + monthlyInterest));
				}
				monthsTextField.setText(String.valueOf(months));
				}
				// reset payment prior to analysis to fix at two decimals
				payment =
				Double.valueOf(paymentTextField.getText()).doubleValue();
				// show analysis
				analysisTextArea.setText("Loan Balance: $" + new
				DecimalFormat("0.00").format(balance));
				analysisTextArea.append("\n" + "Interest Rate: " + new
				DecimalFormat("0.00").format(interest) + "%");
				// process all but last payment
				loanBalance = balance;
				for (int paymentNumber = 1; paymentNumber <= months - 1; paymentNumber++)
				{
				loanBalance += loanBalance * monthlyInterest - payment;
				}
				// find final payment
				finalPayment = loanBalance;
				if (finalPayment > payment)
				{
				// apply one more payment
				loanBalance += loanBalance * monthlyInterest - payment;
				finalPayment = loanBalance;
				months++;
				monthsTextField.setText(String.valueOf(months));
				}
				analysisTextArea.append("\n\n" + String.valueOf(months - 1) + " Payments of $" + new DecimalFormat("0.00").format(payment));
				analysisTextArea.append("\n" + "Final Payment of: $" + new
				DecimalFormat("0.00").format(finalPayment));
				analysisTextArea.append("\n" + "Total Payments: $" + new
				DecimalFormat("0.00").format((months - 1) * payment + finalPayment));
				analysisTextArea.append("\n" + "Interest Paid $" + new

				DecimalFormat("0.00").format((months - 1) * payment + finalPayment - balance));
				computeButton.setEnabled(false);
				newLoanButton.setEnabled(true);
				newLoanButton.requestFocus();
    }//GEN-LAST:event_computeButtonActionPerformed

    private void newLoanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLoanButtonActionPerformed
        // TODO add your handling code here:
                                if (computePayment)
				{
				paymentTextField.setText("");
				}
				else
				{
				monthsTextField.setText("");
				}
				analysisTextArea.setText("");
				computeButton.setEnabled(true);
				newLoanButton.setEnabled(false);
				balanceTextField.requestFocus();
    }//GEN-LAST:event_newLoanButtonActionPerformed

    private void monthPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthPaymentActionPerformed
        // TODO add your handling code here:
        computePayment = false;
paymentButton.setVisible(true);
monthPayment.setVisible(false);
monthsTextField.setText("");
monthsTextField.setEditable(false);
monthsTextField.setBackground(Color.YELLOW);
monthsTextField.setFocusable(false);
paymentTextField.setEditable(true);
paymentTextField.setBackground(Color.WHITE);
paymentTextField.setFocusable(true);

computeButton.setText("Compute Number of Payments");
balanceTextField.requestFocus();
    }//GEN-LAST:event_monthPaymentActionPerformed

    private void paymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentButtonActionPerformed
        // TODO add your handling code here:
       computePayment = true;
paymentButton.setVisible(false);
monthPayment.setVisible(true);
monthsTextField.setEditable(true);
monthsTextField.setBackground(Color.WHITE);
monthsTextField.setFocusable(true);
paymentTextField.setText("");
paymentTextField.setEditable(false);
paymentTextField.setBackground(Color.YELLOW);
paymentTextField.setFocusable(false);
computeButton.setText("Compute Monthly Payment");
balanceTextField.requestFocus();
    }//GEN-LAST:event_paymentButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoanAssistant().setVisible(true);
                
            }
        });
    }
    private boolean validateDecimalNumber(JTextField tf)
	{
	// checks to see if text field contains
	// valid decimal number with only digits and a single decimal point
	String s = tf.getText().trim();
	boolean hasDecimal = false;
	boolean valid = true;
	if (s.length() == 0)
	{
	valid = false;
	}
	else
	{
	for (int i = 0; i < s.length(); i++)
	{
	char c = s.charAt(i);
	if (c >= '0' && c <= '9')
	{
	continue;
	}
	else if (c == '.' && !hasDecimal)
	{
	hasDecimal = true;
	}
	else
	{
	// invalid character found

	valid = false;
	}
	}
	}
	tf.setText(s);
	if (!valid)
	{
	tf.requestFocus();
	}
	return (valid);
	}
	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel analysisLabel;
    private javax.swing.JTextArea analysisTextArea;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JTextField balanceTextField;
    private javax.swing.JButton computeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel interestLabel;
    private javax.swing.JTextField interestTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton monthPayment;
    private javax.swing.JLabel monthsLabel;
    private javax.swing.JTextField monthsTextField;
    private javax.swing.JButton newLoanButton;
    private javax.swing.JButton paymentButton;
    private javax.swing.JLabel paymentLabel;
    private javax.swing.JTextField paymentTextField;
    // End of variables declaration//GEN-END:variables
}
